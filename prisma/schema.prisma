// Schema Prisma para Sistema de Gerenciamento de Loja de Aluguel de Roupas


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

//==========================
// Módulo de Autenticação
//==========================
model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  password           String
  role               Role      @default(USER)
  status             UserStatus @default(ACTIVE)
  failedLoginAttempts Int       @default(0)
  lastLoginAt        DateTime?
  twoFactorEnabled   Boolean   @default(false)
  twoFactorSecret    String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  employee           Employee?
  customer           Customer?
  auditLogs          AuditLog[]
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  TEMP_PASSWORD
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  resource  String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
}

//==========================
// Módulo de Funcionários
//==========================
model Employee {
  id              String   @id @default(uuid())
  userId          String   @unique
  name            String
  cpf             String   @unique
  phone           String
  address         String
  city            String
  state           String
  zipCode         String
  position        String
  salary          Decimal
  hireDate        DateTime
  workingHours    String
  performanceRate Decimal? @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id])
  contracts       Contract[]
}

//==========================
// Módulo de Clientes
//==========================
model Customer {
  id                String   @id @default(uuid())
  userId            String?  @unique
  name              String
  documentType      DocumentType
  documentNumber    String   @unique
  birthDate         DateTime?
  phone             String
  email             String
  instagram         String?
  address           String
  city              String
  state             String
  zipCode           String
  bodyMeasurements  Json?    // Armazena todas as 17 medidas como objeto JSON
  loyaltyPoints     Int      @default(0)
  preferences       String?
  observations      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User?    @relation(fields: [userId], references: [id])
  contracts         Contract[]
  notifications     Notification[]
}

enum DocumentType {
  CPF
  CNPJ
}

//==========================
// Módulo de Inventário
//==========================
model Product {
  id              String   @id @default(uuid())
  name            String
  code            String   @unique
  color           String
  size            String
  rentalPrice     Decimal
  replacementCost Decimal?
  quantity        Int
  status          ProductStatus @default(AVAILABLE)
  location        String?
  description     String?
  maintenanceInfo String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      String
  images          ProductImage[]
  maintenanceLogs MaintenanceLog[]
  contractItems   ContractItem[]
}

enum ProductStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
  CLEANING
  DISCARDED
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  isMain    Boolean  @default(false)
  productId String
  createdAt DateTime @default(now())
  
  product   Product  @relation(fields: [productId], references: [id])
}

model MaintenanceLog {
  id           String    @id @default(uuid())
  productId    String
  description  String
  cost         Decimal?
  startDate    DateTime
  endDate      DateTime?
  status       MaintenanceStatus
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  product      Product   @relation(fields: [productId], references: [id])
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

//==========================
// Módulo de Eventos/Locais
//==========================
model Event {
  id          String   @id @default(uuid())
  name        String
  date        DateTime
  category    String
  locationId  String
  capacity    Int?
  organizer   String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  location    Location @relation(fields: [locationId], references: [id])
  contracts   Contract[]
}

model Location {
  id          String   @id @default(uuid())
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  capacity    Int?
  type        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  events      Event[]
}

//==========================
// Módulo de Aluguéis/Contratos
//==========================
model Contract {
  id                String    @id @default(uuid())
  customerId        String
  employeeId        String
  eventId           String?
  contractNumber    String    @unique
  fittingDate       DateTime?
  pickupDate        DateTime
  returnDate        DateTime
  status            ContractStatus @default(DRAFT)
  totalAmount       Decimal
  depositAmount     Decimal?
  specialConditions String?
  observations      String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  customer          Customer  @relation(fields: [customerId], references: [id])
  employee          Employee  @relation(fields: [employeeId], references: [id])
  event             Event?    @relation(fields: [eventId], references: [id])
  items             ContractItem[]
  payments          Payment[]
}

enum ContractStatus {
  DRAFT
  FITTING_SCHEDULED
  SIGNED
  PAID
  PICKED_UP
  RETURNED
  COMPLETED
  CANCELLED
  LATE
}

model ContractItem {
  id         String   @id @default(uuid())
  contractId String
  productId  String
  quantity   Int
  unitPrice  Decimal
  subtotal   Decimal
  createdAt  DateTime @default(now())
  
  contract   Contract @relation(fields: [contractId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id           String       @id @default(uuid())
  contractId   String
  amount       Decimal
  method       PaymentMethod
  status       PaymentStatus @default(PENDING)
  installments Int          @default(1)
  reference    String?      // Para referências externas de pagamento
  paidAt       DateTime?
  dueDate      DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  contract     Contract     @relation(fields: [contractId], references: [id])
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  BANK_TRANSFER
  PIX
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  CANCELLED
  REFUNDED
}

//==========================
// Notificações
//==========================
model Notification {
  id          String           @id @default(uuid())
  customerId  String
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  sentAt      DateTime         @default(now())
  readAt      DateTime?
  
  customer    Customer         @relation(fields: [customerId], references: [id])
}

enum NotificationType {
  FITTING_REMINDER
  RESERVATION_CONFIRMATION
  RETURN_ALERT
  BIRTHDAY
  PAYMENT_CONFIRMATION
  GENERAL
}

//==========================
// Módulo de Relatórios
//==========================
model Report {
  id          String       @id @default(uuid())
  name        String
  type        ReportType
  parameters  Json?
  createdBy   String
  createdAt   DateTime     @default(now())
  generatedAt DateTime?
  fileUrl     String?
}

enum ReportType {
  EMPLOYEE_PERFORMANCE
  PRODUCT_PROFITABILITY
  CUSTOMER_SEGMENTATION
  FINANCIAL_FORECAST
  CUSTOM
}
